#
name: Create and publish a Docker image

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  push:
    branches: [ 'astria-main' ]

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
#  IMAGE_NAME: ${{ github.repository }}
  IMAGE_NAME: ${{ github.repository }}

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      #
    steps:
        # https://github.com/marketplace/actions/free-disk-space-ubuntu
        - name: Free Disk Space (Ubuntu)
          uses: jlumbroso/free-disk-space@main
          with:
            # this might remove tools that are actually needed,
            # if set to "true" but frees about 6 GB
            tool-cache: false

            # all of these default to true, but feel free to set to
            # "false" if necessary for your workflow
            android: true
            dotnet: true
            haskell: true
            large-packages: true
            docker-images: true
            swap-storage: true

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Checkout repository
          uses: actions/checkout@v4

        # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
        - name: Log in to the Container registry
          uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
          with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Get current date
          id: date
          run: echo date=$(date +%s) >> $GITHUB_OUTPUT

        - name: More space
          id: more_space
          run: sudo rm -rf "/usr/local/share/boost" "/usr/local/share/cmake" "/usr/local/share/doc"

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
        - name: Extract metadata (tags, labels) for Docker
          id: meta
          uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
          with:
            images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            tags: |
              type=ref,event=branch
              type=ref,event=pr
              type=semver,pattern={{version}}
              type=semver,pattern={{major}}.{{minor}}
              type=semver,pattern={{major}}
              type=raw,value=${{ steps.date.outputs.date }}
            labels: |
              org.opencontainers.image.title=${{ github.repository }}
              org.opencontainers.image.description=${{ github.event.repository.description }}
              org.opencontainers.image.url=${{ github.event.repository.html_url }}
              org.opencontainers.image.source=${{ github.event.repository.clone_url }}
              org.opencontainers.image.version=${{ github.run_number }}
              org.opencontainers.image.created=${{ steps.prep.outputs.created }}
              org.opencontainers.image.revision=${{ github.sha }}
              org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}

        # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
        # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
        # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
        - name: Build and push Docker image
          id: push
          uses: docker/build-push-action@v6
          with:
            context: .
            push: true
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
            cache-from: type=gha
            cache-to: type=gha,mode=max
